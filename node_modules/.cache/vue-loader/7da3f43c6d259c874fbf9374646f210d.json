{"remainingRequest":"/root/panda/node_modules/vue-loader/lib/index.js??vue-loader-options!/root/panda/src/components/tomcat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/root/panda/src/components/tomcat.vue","mtime":1554281440469},{"path":"/root/panda/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/panda/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/root/panda/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/panda/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nconst x = 3\nconst y = 2\nconst z = 1\nconst gData = []\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0'\n  const tns = _tns || gData\n\n  const children = []\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`\n    tns.push({ title: key, key, scopedSlots: { title: 'title' }})\n    if (i < y) {\n      children.push(key)\n    }\n  }\n  if (_level < 0) {\n    return tns\n  }\n  const level = _level - 1\n  children.forEach((key, index) => {\n    tns[index].children = []\n    return generateData(level, key, tns[index].children)\n  })\n}\ngenerateData(z)\n\nconst dataList = []\nconst generateList = (data) => {\n  for (let i = 0; i < data.length; i++) {\n    const node = data[i]\n    const key = node.key\n    dataList.push({ key, title: key })\n    if (node.children) {\n      generateList(node.children, node.key)\n    }\n  }\n}\ngenerateList(gData)\n\nconst getParentKey = (key, tree) => {\n  let parentKey\n  for (let i = 0; i < tree.length; i++) {\n    const node = tree[i]\n    if (node.children) {\n      if (node.children.some(item => item.key === key)) {\n        parentKey = node.key\n      } else if (getParentKey(key, node.children)) {\n        parentKey = getParentKey(key, node.children)\n      }\n    }\n  }\n  return parentKey\n}\nexport default {\n  data () {\n    return {\n      expandedKeys: [],\n      searchValue: '',\n      autoExpandParent: true,\n      gData,\n    }\n  },\n  methods: {\n    onExpand  (expandedKeys) {\n      this.expandedKeys = expandedKeys\n      this.autoExpandParent = false\n    },\n    onChange (e) {\n      const value = e.target.value\n      const expandedKeys = dataList.map((item) => {\n        if (item.key.indexOf(value) > -1) {\n          return getParentKey(item.key, gData)\n        }\n        return null\n      }).filter((item, i, self) => item && self.indexOf(item) === i)\n      Object.assign(this, {\n        expandedKeys,\n        searchValue: value,\n        autoExpandParent: true,\n      })\n    },\n  },\n}\n",{"version":3,"sources":["tomcat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"tomcat.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div :style=\"{ padding: '24px', background: '#fff', minHeight: '360px' }\">\n    <a-input-search style=\"margin-bottom: 8px\" placeholder=\"Search\" @change=\"onChange\" />\n    <a-tree\n      @expand=\"onExpand\"\n      :expandedKeys=\"expandedKeys\"\n      :autoExpandParent=\"autoExpandParent\"\n      :treeData=\"gData\"\n    >\n      <template slot=\"title\" slot-scope=\"{title}\">\n        <span v-if=\"title.indexOf(searchValue) > -1\">\n          {{title.substr(0, title.indexOf(searchValue))}}\n          <span style=\"color: #f50\">{{searchValue}}</span>\n          {{title.substr(title.indexOf(searchValue) + searchValue.length)}}\n        </span>\n        <span v-else>{{title}}</span>\n      </template>\n    </a-tree>\n  </div>\n</template>\n\n<script>\nconst x = 3\nconst y = 2\nconst z = 1\nconst gData = []\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0'\n  const tns = _tns || gData\n\n  const children = []\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`\n    tns.push({ title: key, key, scopedSlots: { title: 'title' }})\n    if (i < y) {\n      children.push(key)\n    }\n  }\n  if (_level < 0) {\n    return tns\n  }\n  const level = _level - 1\n  children.forEach((key, index) => {\n    tns[index].children = []\n    return generateData(level, key, tns[index].children)\n  })\n}\ngenerateData(z)\n\nconst dataList = []\nconst generateList = (data) => {\n  for (let i = 0; i < data.length; i++) {\n    const node = data[i]\n    const key = node.key\n    dataList.push({ key, title: key })\n    if (node.children) {\n      generateList(node.children, node.key)\n    }\n  }\n}\ngenerateList(gData)\n\nconst getParentKey = (key, tree) => {\n  let parentKey\n  for (let i = 0; i < tree.length; i++) {\n    const node = tree[i]\n    if (node.children) {\n      if (node.children.some(item => item.key === key)) {\n        parentKey = node.key\n      } else if (getParentKey(key, node.children)) {\n        parentKey = getParentKey(key, node.children)\n      }\n    }\n  }\n  return parentKey\n}\nexport default {\n  data () {\n    return {\n      expandedKeys: [],\n      searchValue: '',\n      autoExpandParent: true,\n      gData,\n    }\n  },\n  methods: {\n    onExpand  (expandedKeys) {\n      this.expandedKeys = expandedKeys\n      this.autoExpandParent = false\n    },\n    onChange (e) {\n      const value = e.target.value\n      const expandedKeys = dataList.map((item) => {\n        if (item.key.indexOf(value) > -1) {\n          return getParentKey(item.key, gData)\n        }\n        return null\n      }).filter((item, i, self) => item && self.indexOf(item) === i)\n      Object.assign(this, {\n        expandedKeys,\n        searchValue: value,\n        autoExpandParent: true,\n      })\n    },\n  },\n}\n</script>\n"]}]}